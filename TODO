ROADMAP, 1.0:
=============

Files to make/finish
--------------------
local.py
default/msgreader.py
default/msgwriter.py / editor.py (utf-8!)
default/ueditor.py
default/page.py
  hijack another session with a gosub(),
  they will use term.fullscreen (),
default/irc.py
default/weather.py
default/si.py <-- merge in torus.py
default/ttyplay.py
default/wfc.py
default/plan.py (browse, xmodem up/down)
default/pwreset.py

DOCS
----
* create wiki articles:
  - custom matrix
  - simple door game (grafitti!)
  - about scripts included
* bbs api for bbs/ module

TESTING
-------
* ensure you can have a login name of [some-japanese-characters]
  and this is fine everywhere
* TERM=unknown -- this should create an 'expert mode' bbs, with
  no frills, no lightbars, no artwork, etc. -- for low bandwidth
  terminals.
* assert that any line that y and x, yloc, xloc, ypos, xpos, row, col
  are used, that they appear in order of Y, X.
* assert that any method or function that returns ansi string sequences ends with term.normal.
* assert that UTF-8 is always referred to as 'utf8',
  and is referred to as minimally as possible, fewest knobs.

must be compatible with the following clients,
OSX: iTerm2, Terminal.app
Windows: PuTTy, SyncTerm, mtel, telnet (-t vtnt?)
BSD/Linux: uxterm, bsdtelnet, linux console

it is possible with multiprocessing module,
http://docs.python.org/library/multiprocessing.html#using-a-remote-manager
for a ./local.py, to instantiate a modified bbs.Session,
and register as a client to a running engine.py,
 .. and that can be remote. there is a risk of
    executing arbitrary code due to the pickling process,
    but if you trust the clients, this is a way to build a 'farm'
    of bbs systems .. and may be how local.py should run;

PARKING LOT
===========
Lord / dosemu / freedos / dosbox eample
flesh out fileserver ... zIPE's call.
  at least hook on_* methods
  file stats, ftpd admin door, etc.
19:34  airwalk you need 1) gl like ftp support
19:34  airwalk and 2) zipscript-c support
